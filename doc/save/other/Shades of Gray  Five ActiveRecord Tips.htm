<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- saved from url=(0063)http://blog.grayproductions.net/articles/five_activerecord_tips -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <title>Shades of Gray: Five ActiveRecord Tips</title>

    <link href="./Shades of Gray  Five ActiveRecord Tips_files/application.css" media="screen" rel="Stylesheet" type="text/css">
    <script src="./Shades of Gray  Five ActiveRecord Tips_files/prototype.js" type="text/javascript"></script>
<script src="./Shades of Gray  Five ActiveRecord Tips_files/effects.js" type="text/javascript"></script>
<script src="./Shades of Gray  Five ActiveRecord Tips_files/dragdrop.js" type="text/javascript"></script>
<script src="./Shades of Gray  Five ActiveRecord Tips_files/controls.js" type="text/javascript"></script>
<script src="./Shades of Gray  Five ActiveRecord Tips_files/application.js" type="text/javascript"></script>
    <link href="http://blog.grayproductions.net/articles/five_activerecord_tips.rss" rel="alternate" title="RSS" type="application/rss+xml">
</head><body>
    <table cellspacing="10" cellpadding="0" id="page">
        <tbody><tr>
            <td colspan="2" id="header">
                <a href="http://blog.grayproductions.net/"><img alt="Shades of Gray" height="40" src="./Shades of Gray  Five ActiveRecord Tips_files/logo.png" width="215"></a>
            </td>
        </tr><tr>
            <td id="sidebar">
                <div class="author"><h2>About the Author</h2>

<img src="./Shades of Gray  Five ActiveRecord Tips_files/james_headshot_square.jpg" width="100" height="100">

<p>
    James Edward Gray II joined the Ruby community in 2004 and they just haven't
    been able to get rid of him since then.
</p>

<p>
    James writes Ruby code for fun and profit, pens books with a good deal of
    Ruby in them, gives speeches about the language, and runs the local support
    group for Ruby addicts.  He definitely sees the world through Ruby-colored
    glasses.
</p>
</div>
                <div class="search"><h2>Search</h2>

<form action="http://blog.grayproductions.net/articles/five_activerecord_tips#" method="post" onsubmit="return false">
    <input id="search_terms" name="terms" type="text">
    <img alt="Busy" height="15" id="search_busy_icon" src="./Shades of Gray  Five ActiveRecord Tips_files/busy.gif" style="display: none" width="15">
    <script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('search_terms', 0.5, function(element, value) {new Ajax.Request('/searches', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('search_busy_icon')}, onLoading:function(request){Element.show('search_busy_icon')}, parameters:'terms=' + value})})
//]]>
</script>
</form>

<div id="search_results"></div>
</div>
                <div class="categories"><h2>Categories</h2>

<ul class="links">
    
        <li>
            <a href="http://blog.grayproductions.net/categories/about_this_blog">About This Blog</a>
            <span class="count">(4)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/book_reviews">Book Reviews</a>
            <span class="count">(8)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/character_encodings">Character Encodings</a>
            <span class="count">(12)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/conferences">Conferences</a>
            <span class="count">(6)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/early_steps">Early Steps</a>
            <span class="count">(4)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/fastercsv">FasterCSV</a>
            <span class="count">(3)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/ghost_wheel">Ghost Wheel</a>
            <span class="count">(1)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/higherorder_ruby">Higher-Order Ruby</a>
            <span class="count">(6)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/highline">HighLine</a>
            <span class="count">(1)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/keyvalue_stores">Key-Value Stores</a>
            <span class="count">(7)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/language_comparisons">Language Comparisons</a>
            <span class="count">(4)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/my_heroes">My Heroes</a>
            <span class="count">(2)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/noncode">Non-Code</a>
            <span class="count">(9)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/parsing">Parsing</a>
            <span class="count">(1)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/rails">Rails</a>
            <span class="count">(4)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/rake_tasks">Rake Tasks</a>
            <span class="count">(1)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/ruby_tutorials">Ruby Tutorials</a>
            <span class="count">(29)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/ruby_voodoo">Ruby Voodoo</a>
            <span class="count">(10)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/screencasts">Screencasts</a>
            <span class="count">(3)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/the_gateway">The Gateway</a>
            <span class="count">(4)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/the_ruby_vm_interview">The Ruby VM Interview</a>
            <span class="count">(6)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/the_standard_library">The Standard Library</a>
            <span class="count">(10)</span>
        </li>
    
        <li>
            <a href="http://blog.grayproductions.net/categories/tools_of_the_trade">Tools of the Trade</a>
            <span class="count">(13)</span>
        </li>
    
</ul>

</div>
                <div class="links"><h2>Books by the Author</h2>

<ul class="links">
    <li><a href="http://www.pragmaticprogrammer.com/titles/textmate/index.html">TextMate</a></li>
    <li><a href="http://www.pragmaticprogrammer.com/titles/fr_quiz/index.html">Best of Ruby Quiz</a></li>
</ul>

<h2>Twitter Account</h2>

<ul class="links">
    <li><a href="http://twitter.com/JEG2">JEG2</a></li>
</ul>

<h2>Other Ruby Projects</h2>

<ul class="links">
    <li><a href="http://rubyquiz.com/">Ruby Quiz</a></li>
    <li><a href="http://rubyforge.org/projects/fastercsv/">FasterCSV</a></li>
    <li><a href="http://highline.rubyforge.org/">HighLine</a></li>
    <li><a href="http://rubyforge.org/projects/elif/">Elif</a></li>
    <li><a href="http://github.com/JEG2/rrdb/">RRDB</a></li>
</ul>
</div>
            </td>
            <td id="content">
                
                    
                
                    
                
                <div class="article">
    <h2>
        Five ActiveRecord Tips
        
    </h2>
    
    <div class="details">
        Posted over 2 years ago
        in <a href="http://blog.grayproductions.net/categories/rails">Rails</a>.
    </div>
    
    <p><em>This article was written for the <a href="http://railscasts.com/contest">Railcasts 100th Episode Contest</a>.  I think the idea is great and I look forward to reading great tips from all who decide to participate.</em></p>

<h3>1. create_or_find_by_…</h3>

<p>I imagine most of you know that <code>ActiveRecord</code> can handle finders like:</p>

<pre><code>MyARClass.find_or_create_by_name(some_name)
</code></pre>

<p>This will attempt to find the object that has <code>some_name</code> in its <code>name</code> field or, if the find fails, a new object will be created with that <code>name</code>.  It's important to note that the order is exactly as I just listed it:  find then create.  Here are the relevant lines from the current Rails source showing the process:</p>

<pre><code>record = find_initial(options)

if record.nil?
  record = self.new { |r| r.send(:attributes=, attributes, guard_protected_attributes) }
  #{'yield(record) if block_given?'}
  #{'record.save' if instantiator == :create}
  record
else
  record
end
</code></pre>

<p>The above code is inside a <code>String</code> literal fed to <code>class_eval()</code>, which is why you see interpolation being used.</p>

<p>Unfortunately, this process is subject to race conditions because the object could be created by another process (or <code>Thread</code>) between the find and the creation.  If that happens, you are likely to run into another hardship in that calls to create() fail quietly (returning the unsaved object).  These are some pretty rare happenings for sure, but they can be avoided under certain conditions.</p>

<p>I find myself typically using <code>find_or_create_by_…</code> for things like category groupings or geocoded locations.  In my case, there always seems to be two unique properties I can count on:</p>

<ul>
<li>I don't allow duplicate listings</li>
<li>I don't have to worry about entries being deleted from the database</li>
</ul>

<p>When both of those conditions are true, you can rewrite the Rails helper method to be multiprocessing safe.  The steps are:</p>

<ol>
<li>Build validations so that attempts to save the duplicate fail</li>
<li>Be sure to use create!() instead of create()</li>
<li>Reverse the order to create!() then find()</li>
</ol>

<p>Here's the practical example of how this plays out:</p>

<pre><code>class Category &lt; ActiveRecord::Base
  validates_uniqueness_of :name

  def self.create_or_find_by_name(name)
    create!(:name =&gt; name) rescue find_by_name(name)
  end
end
</code></pre>

<p>The idea here is that we try the <code>create!()</code> first and just let it fail if it doesn't validate (because it is a duplicate).  I use <code>create!()</code> because it doesn't fail silently and the truth is that I generally prefer it for that very reason.  You could also use <code>create()</code> and check the returned object with <code>new_record?()</code>, if you prefer.  When the <code>create!()</code> fails, we know it's safe to call the finder because there is definitely a matching entry in the database.</p>

<h3>2. find_all_in_chunks</h3>

<p>I often want to scan whole tables in a Rails application, usually to generate reports about the data.  Of course, for very large tables, a call to <code>find(:all)</code> is not generally a great idea as it uses up too much memory to slurp all of that data into Ruby objects.</p>

<p>I have a tiny little library I drop in most Rails projects now to help with this.  It requires <a href="http://github.com/mislav/will_paginate/tree/master">will_paginate</a>, so be sure to install that plugin first.  Then just drop this code in lib/find_all_in_chunks.rb:</p>

<pre><code>module FindAllInChunks
  def find_all_in_chunks(query = Hash.new, &amp;iterator)
    1.upto(1.0/0.0) do |i|
      records = paginate({:page =&gt; i, :per_page =&gt; 50}.merge(query))
      records.each(&amp;iterator)
      break unless records.next_page
    end
  end
end

ActiveRecord::Base.extend(FindAllInChunks)
</code></pre>

<p>and add this line to config/environment.rb:</p>

<pre><code>require "find_all_in_chunks"
</code></pre>

<p>The code is simple.  It just fetches the data in chunks by paginating the results and walking through the pages until it reaches the last one.  Each entry in the page is then <code>yield</code>ed to the block you pass this finder.  This makes it seem like you are working with a simple <code>each()</code> iterator, though it will eventually fetch all of the entries.  You can pass will_paginate's <code>:per_page</code> parameter to adjust how many entries are retrieved at one time.</p>

<h3>3. FasterCSV as an Import Tool</h3>

<p>If you need to jump start the database by importing some content, <a href="http://rubyforge.org/projects/fastercsv/">FasterCSV</a> can be a big help.  It can easily feed CSV data into an <code>ActiveRecord</code> subclass using code like:</p>

<pre><code>FCSV.foreach( csv_path, :headers           =&gt; true,
                        :header_converters =&gt; :symbol ) do |row|
  begin
    MyARClass.create!(row.to_hash)
  rescue ActiveRecord::RecordNotSaved # in current Rails
    # handle save failures here…
  end
end
</code></pre>

<p>This uses the first line of your CSV data as the field names, so be sure they match up to the names in your database.  It's also a good idea to make sure the CSV data is in UTF-8 and set <code>$KCODE = "U"</code> when using an older version of Rails that doesn't do this for you.</p>

<p>I tend to just vendor the <code>FasterCSV</code> source and add a require for it in config/environment.rb, so I don't have to worry about installing the gem everywhere.</p>

<h3>4. Learn to Love ActiveRecord's :select Parameter</h3>

<p>I think the most under used feature of <code>ActiveRecord</code>'s finders is the <code>:select</code> parameter.  You really owe it to yourself to play with this sucker until you get the "Ah ha!" moment.</p>

<p>The concept is simple:  <code>:select</code> tells <code>ActiveRecord</code> which columns to fetch from the database.</p>

<p>By default, everything is fetched, but there are great reasons to exclude some fields.  For example, if you are grabbing a bunch of objects from a sizable table (meaning that it has many fields) but you only need certain fields, throw the rest out!  It will take <code>ActiveRecord</code> less time to fetch the data and convert it to Ruby and use less memory, possibly making it practical for you to fetch more entries at once.  That's a lot of great gains!</p>

<p>Another thing to know is that <code>ActiveRecord</code> takes the field names it uses from the names provided here so use SQL's <code>AS</code> to get what you want.  You can even add aggregate fields and alias them so they are just like normal fields for this query.</p>

<p>This has a million different applications, but, to give an example, I pull some email campaign statistics by type using a query like:</p>

<pre><code>statistics = Profile.find( :all
  :select =&gt; "profiles.type, " +
             "COUNT(DISTINCT users.id) AS emailed, " +
             "COUNT(IF(profiles.viewed_offer = 1, 1, NULL)) AS viewed, " +
             "COUNT(IF(profiles.signed_up = 1, 1, NULL)) AS accepted, " +
             "COUNT(IF(users.email_status = 'Opted Out', 1, NULL)) AS unsubscribed",
  :joins  =&gt; "INNER JOIN users ON users.id = profiles.user_id " +
             "INNER JOIN emailings ON emailings.user_id = users.id",
  :group  =&gt; "profiles.type"
)
</code></pre>

<p>In this database a <code>User</code> <code>has_many</code> <code>Profile</code>s and <code>Emailing</code>s are associated with <code>User</code> objects.  I use <code>:joins</code> to link all of that together here.  (The <code>:include</code> option seems to override your custom <code>:select</code> so I just use <code>:joins</code> instead.)  Note that I <code>INNER JOIN</code> these tables to cut down on the data fetched.  It's handy to remember that there are more options to SQL than just what <code>ActiveRecord</code> uses.</p>

<p>The <code>:select</code> parameter is the juicy part here.  I setup a group of aggregate fields to track the statistics we care about, aliasing each of these to nice method names for the returned objects.</p>

<p>This single query combs through a ton of data very quickly and returns all the vital details we care about.  Now it's important to note that what is returned here aren't really <code>Profile</code> objects as we typically think of them.  These are more summary objects that have a new set of methods we defined in this query (<code>emailed()</code>, <code>viewed()</code>, <code>accepted()</code>, <code>unsubscribed()</code>).</p>

<h3>5. Sneaking in a HAVING Clause</h3>

<p><code>ActiveRecord</code> doesn't have a parameter for including a <code>HAVING</code> clause in your database queries and I sometimes find myself needing it.  Luckily, you can sneak it in on the end of your <code>:group</code> parameter without needing to resort to a <code>find_by_sql()</code> call.  (I don't recall ever using <code>HAVING</code> without <code>GROUP BY</code>, though there probably are some cases where it would make sense to do so.)</p>

<p>As an example, here's a query from one of my Rails applications that finds all duplicate email addresses in the database:</p>

<pre><code>duplicates = User.find( :all,
  :select     =&gt; "email, COUNT(email) AS duplicate_count",
  :conditions =&gt; "email IS NOT NULL AND email != ''",
  :group      =&gt; "email HAVING duplicate_count &gt; 1"
)
</code></pre>
    
    <div id="comments">
        
            <div id="comment_3491" class="comment">
    <div class="details">
        <span class="name">Semin</span> added
        about 16 hours later:
        
    </div>

    <p>I have a strong feeling that you are going to be a winner!</p>

<p>Thank you so much for the tips (especially for #2).</p>
</div>

        
            <div id="comment_3589" class="comment">
    <div class="details">
        <span class="name"><a href="http://airbladesoftware.com/">Andy Stewart</a></span> added
        3 days later:
        
    </div>

    <p>Useful knowledge.  Thanks for writing up these tips.</p>
</div>

        
            <div id="comment_4589" class="comment">
    <div class="details">
        <span class="name"><a href="http://www.dweebd.com/">Duncan Beevers</a></span> added
        about 1 month later:
        
    </div>

    <p>will_paginate actually includes a <a href="http://github.com/mislav/will_paginate/tree/master/lib/will_paginate/finder.rb#L99-112">paginated_each</a> method which does operates on batched groups of AR models.</p>

<p>Very important when your set is large.</p>

<p>Nice tip on the HAVING clause.</p>

<p>Also, I haven't played with it much, but you could probably add db-computed attributes to an ActiveRecord model through options specified in a named_scope.</p>
</div>

        
            <div id="comment_4590" class="comment">
    <div class="details">
        <span class="name">James Edward Gray II</span> added
        about 1 month later:
        
    </div>

    <p>I was using an older copy of will_paginate that didn't yet contain paginated_each.  Thanks for pointing it out to me.</p>
</div>

        
            <div id="comment_6175" class="comment">
    <div class="details">
        <span class="name"><a href="http://blog.grayproductions.net/articles/www.pgc.ie">Paul Grout</a></span> added
        3 months later:
        
    </div>

    <p>Tips 4 &amp; 5 were a big help. BTW "(I don't recall ever using HAVING without GROUP BY, though there probably are some cases where it would make sense to do so.)" .. I suppose that would just be a where clause.  </p>
</div>

        
            <div id="comment_6966" class="comment">
    <div class="details">
        <span class="name">Alex</span> added
        4 months later:
        
    </div>

    <p>Any chance you would mind sharing a syntactically correct example of usage for find<em>all</em>in_chunks?  I'm kind of a noob and can't figure out how to use it to replace find(:all).each ...</p>
</div>

        
            <div id="comment_6967" class="comment">
    <div class="details">
        <span class="name">James Edward Gray II</span> added
        4 months later:
        
    </div>

    <p>Sure, you use it like this:</p>

<pre><code>People.find_all_in_chunks(:per_page =&gt; 200) do |person|
  # … use person here …
end
</code></pre>

<p>I wasn't aware of paginated_each() when I wrote it though.  You can just use that with a recent version of will_paginate:</p>

<pre><code>People.paginated_each(:per_page =&gt; 200) do |person|
  # … use person here …
end
</code></pre>

<p>Hope that helps.</p>
</div>

        
            <div id="comment_6995" class="comment">
    <div class="details">
        <span class="name">Alex</span> added
        4 months later:
        
    </div>

    <p>Thanks so much for that!</p>
</div>

        
            <div id="comment_8260" class="comment">
    <div class="details">
        <span class="name"><a href="mailto:technoweenie@gmail.com">rick</a></span> added
        5 months later:
        
    </div>

    <p>Technically, your fourth tip is wrong.  Find is for finding records, but you're running an aggregated query.  That's what #count was made for.  However, you can't perform multiple aggregations (if someone can suggest a clean API for this, I'd be more then happy to implement).</p>

<p>However, #5 can be shortened to: <code>User.count(:id, :group =&gt; :email, :having =&gt; 'count(id) &gt; 1')</code>.  As a bonus, you can use a <code>belongs_to</code> attribute.  <code>Order.count(:id, :group =&gt; :product)</code>.  For cases where you can't use #count, you can also do something like:  <code>User.connection.select_all(User.sanitize_sql([..., *args]))</code>.  It's definitely not pretty, so perhaps creating pseudo models with your custom #find call isn't a big deal.</p>

<p>Just FYI: surround source code terms like <code>foo_bar</code> with the tilde so that markdown doesn't treat it like <em>italics</em>.</p>
</div>

        
            <div id="comment_30180" class="comment">
    <div class="details">
        <span class="name"><a href="http://1rad.wordpress.com/">eno</a></span> added
        10 months later:
        
    </div>

    <p>Sadly apparently noone in the Rails community is aware of your first topic. But even more sadly your solution actually features a race condition similar to that in the original implementation; namely two competing processes might run in the situation where the entry is not yet there. The only way I found to work around that and any those issues is by using some kind of DB level locking, see http://1rad.wordpress.com/2008/09/29/0x04-atomic-science/ I would like to see a MT safe implementation in rails, but apparently noone cares.</p>
</div>

        
        
    </div>
    
    <form action="http://blog.grayproductions.net/articles/five_activerecord_tips/comments" id="new_comment" method="post">
        <h3>Add Your Thoughts</h3>
        
        <p>
            You can use
            <a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a>
            in the body of your comment to format text and make links.
        </p>
        
        <p>
            Note that I reserve the right to edit any content you post here.  I
            typically exercise this right to fix formatting issues.  All posts
            must be approved so spam will never be seen on these pages.
        </p>
        
        <div id="comment_results">
            
        </div>
        
        

<dl>
    <dt>Author:</dt>
    <dd><input class="wide" id="comment_author" name="comment[author]" size="30" type="text"></dd>

    <dt>URL or Email (optional):</dt>
    <dd><input class="wide" id="comment_authors_url" name="comment[authors_url]" size="30" type="text"></dd>

    <dt>Body:</dt>
    <dd><textarea class="wide" cols="40" id="comment_body" name="comment[body]" rows="10"></textarea></dd>
</dl>

        <input name="commit" type="submit" value="Comment">
    </form>
</div>
                
            </td>
        </tr><tr>
            <td colspan="2" id="footer">
                <a href="mailto:james@grayproductions.net"><img alt="james@grayproductions.net" height="30" src="./Shades of Gray  Five ActiveRecord Tips_files/signature.png" width="200"></a>
            </td>
        </tr>
    </tbody></table>
    <script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
    </script><script src="./Shades of Gray  Five ActiveRecord Tips_files/ga.js" type="text/javascript"></script>
    <script type="text/javascript">
    try {
    var pageTracker = _gat._getTracker("UA-11092556-1");
    pageTracker._trackPageview();
    } catch(err) {}</script>

</body></html>